summary(model_spline_red)
T0 <- anova(model_spline_red,model_spline,test='F')
View(T0)
T0 <- anova(model_spline_red,model_spline,test='F')[2,6]
T2 <- numeric(B)
B=1000
seed=2022
T2 <- numeric(B)
set.seed(seed)
residuals <- model_spline$residuals
fitted <- model_spline$fitted.values
anova(model_spline_red,model_spline,test='F')
T0 <- anova(model_spline_red,model_spline,test='F')[2,5]
residuals <- model_spline$residuals
fitted <- model_spline$fitted.values
T2 <- numeric(B)
set.seed(seed)
for(b in 1:B){
y.perm <- fitted + sample(residuals, replace=F)
model_perm_red <-  lm(y.perm ~ bs(wave_280, knots =median(wave_280), degree = dg), data = dataset)
model_perm <-lm(y.perm ~ bs(wave_280, knots =median(wave_280), degree = dg)+bs(wave_700, knots =median(wave_700), degree = dg), data = dataset)
T2 <- anova(model_perm_red,model_perm,test='F')[2,5]
}
sum(T2>=T0)/B
residuals <- model_spline_red$residuals
fitted <- model_spline_red$fitted.values
B=1000
seed=2022
T2 <- numeric(B)
set.seed(seed)
for(b in 1:B){
y.perm <- fitted + sample(residuals, replace=F)
model_perm_red <-  lm(y.perm ~ bs(wave_280, knots =median(wave_280), degree = dg), data = dataset)
model_perm <-lm(y.perm ~ bs(wave_280, knots =median(wave_280), degree = dg)+bs(wave_700, knots =median(wave_700), degree = dg), data = dataset)
T2 <- anova(model_perm_red,model_perm,test='F')[2,5]
}
sum(T2>=T0)/B
T2 <- numeric(B)
set.seed(seed)
for(b in 1:B){
y.perm <- fitted + sample(residuals, replace=F)
model_perm_red <-  lm(y.perm ~ bs(wave_280, knots =median(wave_280), degree = dg), data = dataset)
model_perm <-lm(y.perm ~ bs(wave_280, knots =median(wave_280), degree = dg)+bs(wave_700, knots =median(wave_700), degree = dg), data = dataset)
T2[b] <- anova(model_perm_red,model_perm,test='F')[2,5]
}
sum(T2>=T0)/B
seed=2022
T2 <- numeric(B)
set.seed(seed)
for(b in 1:B){
y.perm <- fitted + sample(residuals, replace=F)
model_perm_red <-  lm(y.perm ~ bs(wave_280, knots =median(wave_280), degree = dg), data = dataset)
#model_perm <-lm(y.perm ~ bs(wave_280, knots =median(wave_280), degree = dg)+bs(wave_700, knots =median(wave_700), degree = dg), data = dataset)
T2[b] <- anova(model_perm_red,model_spline,test='F')[2,5]
}
kappa_casein <- fitted + sample(residuals, replace=F)
set.seed(seed)
for(b in 1:B){
kappa_casein <- fitted + sample(residuals, replace=F)
model_perm_red <-  lm(kappa_casein ~ bs(wave_280, knots =median(wave_280), degree = dg), data = dataset)
#model_perm <-lm(y.perm ~ bs(wave_280, knots =median(wave_280), degree = dg)+bs(wave_700, knots =median(wave_700), degree = dg), data = dataset)
T2[b] <- anova(model_perm_red,model_spline,test='F')[2,5]
}
sum(T2>=T0)/B
T2 <- numeric(B)
set.seed(seed)
for(b in 1:B){
y.perm <- fitted + sample(residuals, replace=F)
milk_2 <- dataset
milk_2$kappa_casein <- y.perm
model_perm_red <-  lm(kappa_casein ~ bs(wave_280, knots =median(wave_280), degree = dg), data = milk_2)
#model_perm <-lm(y.perm ~ bs(wave_280, knots =median(wave_280), degree = dg)+bs(wave_700, knots =median(wave_700), degree = dg), data = dataset)
T2[b] <- anova(model_perm_red,model_spline,test='F')[2,5]
}
sum(T2>=T0)/B
rm(kappa_casein)
#2        #quadratic
#3        #cubic
model_spline <-
lm(kappa_casein ~ bs(wave_280, knots =median(wave_280), degree = dg)+bs(wave_700, knots =median(wave_700), degree = dg), data = dataset)
model_spline_red <-
lm(kappa_casein ~ bs(wave_280, knots =median(wave_280), degree = dg), data = dataset)
T0 <- anova(model_spline_red,model_spline,test='F')[2,5]
residuals <- model_spline_red$residuals
fitted <- model_spline_red$fitted.values
B=1000
seed=2022
T2 <- numeric(B)
set.seed(seed)
T2 <- numeric(B)
set.seed(seed)
for(b in 1:B){
y.perm <- fitted + sample(residuals, replace=F)
milk_2 <- dataset
milk_2$kappa_casein <- y.perm
model_perm <-  lm(kappa_casein ~ bs(wave_280, knots =median(wave_280), degree = dg)+ bs(wave_700, knots =median(wave_700), degree = dg), data = milk_2)
#model_perm <-lm(y.perm ~ bs(wave_280, knots =median(wave_280), degree = dg)+bs(wave_700, knots =median(wave_700), degree = dg), data = dataset)
T2[b] <- anova(model_perm,model_spline_red,test='F')[2,5]
}
sum(T2>=T0)/B
T0 <- anova(model_spline_red,model_spline,test='F')[2,5]
residuals <- model_spline$residuals
fitted <- model_spline$fitted.values
B=1000
seed=2022
T2 <- numeric(B)
set.seed(seed)
for(b in 1:B){
y.perm <- fitted + sample(residuals, replace=F)
milk_2 <- dataset
milk_2$kappa_casein <- y.perm
model_perm <-  lm(kappa_casein ~ bs(wave_280, knots =median(wave_280), degree = dg), data = milk_2)
#model_perm <-lm(y.perm ~ bs(wave_280, knots =median(wave_280), degree = dg)+bs(wave_700, knots =median(wave_700), degree = dg), data = dataset)
T2[b] <- anova(model_perm,model_spline,test='F')[2,5]
}
sum(T2>=T0)/B
T2 <- numeric(B)
set.seed(seed)
for(b in 1:B){
y.perm <- fitted + sample(residuals, replace=F)
milk_2 <- dataset
milk_2$kappa_casein <- y.perm
model_perm <-  lm(kappa_casein ~ bs(wave_280, knots =median(wave_280), degree = dg), data = milk_2)
#model_perm <-lm(y.perm ~ bs(wave_280, knots =median(wave_280), degree = dg)+bs(wave_700, knots =median(wave_700), degree = dg), data = dataset)
T2[b] <- anova(model_perm,model_spline,test='F')[2,5]
}
hist(T2)
abline(v=T0)
hist(T2)
abline(v=T0,col='green')
X.grid=seq(range(wave_280)[1],range(wave_280)[2],by=100)
X.grid=seq(range(wave_280)[1],range(wave_280)[2],by=100)
preds=predict(model_spline_red,list(wave_280=X.grid),se=T)
# design matrix
br=median(wave_280)
design_matrix=bs(wave_280, degree=dg,knots=median(wave_280))
pred_grid=matrix(bs(X.grid,degree=dg,knots=br),nrow=length(X.grid))
alpha=0.05
c_preds=conformal.pred(design_matrix,dataset$kappa_casein,pred_grid,alpha,verbose=T,train.fun = lm_train,predict.fun = lm_predict,num.grid.pts = 200)
################################################################################
###### ESERCITAZIONI------
######## CONFORMAL PREDICTION ###########
library(dbscan)
c_preds=conformal.pred(design_matrix,dataset$kappa_casein,pred_grid,alpha,verbose=T,train.fun = lm_train,predict.fun = lm_predict,num.grid.pts = 200)
library(conformalInference)
c_preds=conformal.pred(design_matrix,dataset$kappa_casein,pred_grid,alpha,verbose=T,train.fun = lm_train,predict.fun = lm_predict,num.grid.pts = 200)
# extracting the 2 functions that I need from the package
lm_train=lm.funs(intercept = T)$train.fun
lm_predict=lm.funs(intercept = T)$predict.fun
c_preds=conformal.pred(design_matrix,dataset$kappa_casein,pred_grid,alpha,verbose=T,train.fun = lm_train,predict.fun = lm_predict,num.grid.pts = 200)
lines(X.grid,c_preds$pred ,lwd =2, col ="red",lty=3)
plot(wave_280 ,kappa_casein ,xlim=range(X.grid) ,cex =.5, col =" darkgrey " )
plot(wave_280 ,kappa_casein ,xlim=range(X.grid) ,cex =.5, col =" darkgrey " )
lines(X.grid,c_preds$pred ,lwd =2, col ="red",lty=3)
matlines(X.grid ,cbind(c_preds$up,c_preds$lo) ,lwd =1, col =" blue",lty =3)
View(dataset)
plot(wave_280 ,kappa_casein ,xlim=range(X.grid) ,cex =.5, col =" darkgrey " )
plot(wave_280 ,dataset$kappa_casein ,xlim=range(X.grid) ,cex =.5, col =" darkgrey " )
X.grid=seq(range(wave_280)[1],range(wave_280)[2],length.out=100)
preds=predict(model_spline_red,list(wave_280=X.grid),se=T)
# design matrix
br=median(wave_280)
design_matrix=bs(wave_280, degree=dg,knots=median(wave_280))
pred_grid=matrix(bs(X.grid,degree=dg,knots=br),nrow=length(X.grid))
alpha=0.05
c_preds=conformal.pred(design_matrix,dataset$kappa_casein,pred_grid,alpha,verbose=T,train.fun = lm_train,predict.fun = lm_predict,num.grid.pts = 200)
plot(wave_280 ,dataset$kappa_casein ,xlim=range(X.grid) ,cex =.5, col =" darkgrey " )
lines(X.grid,c_preds$pred ,lwd =2, col ="red",lty=3)
matlines(X.grid ,cbind(c_preds$up,c_preds$lo) ,lwd =1, col =" blue",lty =3)
setwd('C:/Users/franc/Desktop/NONPA/TDE/FEBBRAIO')
dataset <- readRDS('milk_samples_1_feb.Rds')
dataset <- readRDS('milk_samples_3_feb.Rds')
View(dataset)
341/382
library(robustbase)
library(psych)
alpha <- 0.89
fit_MCD <- covMcd(x = dataset, alpha = alpha, nsamp = 1000)
fit_MCD$raw.center
fit_MCD <- covMcd(x = dataset[,1:3], alpha = alpha, nsamp = 1000)
fit_MCD$raw.center
fit_MCD$raw.cov
ind_rew_obs <-
which(
mahalanobis(
x = dataset,
center = fit_MCD$raw.center,
cov = fit_MCD$raw.cov
) <= qchisq(p = .975, df = p)
)
ind_rew_obs <-
which(
mahalanobis(
x = dataset[,1:3],
center = fit_MCD$raw.center,
cov = fit_MCD$raw.cov
) <= qchisq(p = .975, df = p)
)
p <- ncol(dataset)
p <- ncol(dataset[,1:3])
ind_rew_obs <-
which(
mahalanobis(
x = dataset[,1:3],
center = fit_MCD$raw.center,
cov = fit_MCD$raw.cov
) <= qchisq(p = .975, df = p)
)
ind_best_subset <- fit_MCD$best
N <- nrow(dataset)
p <- ncol(dataset[,1:3])
ind_outlier <- setdiff(1:N,ind_best_subset)
plot(dataset, col=ifelse(1:N%in%ind_best_subset,"black","red"),pch=19)
View(dataset)
fit_lts <- ltsReg(kappa_casein~wavw_280, alpha=.75,mcd=TRUE,data=dataset) #ltsreg in the MASS package uses an older (slower) implementation of the LTS estimator
fit_lts <- ltsReg(kappa_casein~wave_280, alpha=.75,mcd=TRUE,data=dataset) #ltsreg in the MASS package uses an older (slower) implementation of the LTS estimator
plot(dataset, col=ifelse(1:N%in%fit_lts$best,"red","black"),pch=19)
plot(dataset[,c(1,4)], col=ifelse(1:N%in%fit_lts$best,"red","black"),pch=19)
with( dataset,plot(wave_280,kappa_casein, col=ifelse(1:N%in%fit_lts$best,"red","black"),pch=19))
lines(fit_lts)
with( dataset,plot(wave_280,kappa_casein, col=ifelse(1:N%in%fit_lts$best,"red","black"),pch=19))
abline(fit_lts)
plot(fit_lts)
setwd('C:/Users/franc/Desktop/NONPA/PROGETTO/ALZHEIMER_prognonpa/EDOARDO')
setwd('C:/Users/franc/Desktop/NONPA/PROGETTO/ALZHEIMER_prognonpa/EDOARDO')
data<- read.csv2('data.csv', sep=',')
View(data)
View(data)
attach(data)
View(data)
data$LABEL <-ifelse(label='Dem',2,1)
data$LABEL <-ifelse(label=='Dem',2,1)
dataset_<- read.csv2('oasis_cross-sectional.csv', sep=',')
setwd('C:/Users/franc/Desktop/NONPA/PROGETTO/ALZHEIMER_prognonpa/EDOARDO')
dataset<- read.csv2('oasis_cross-sectional.csv', sep=',')
setwd('C:/Users/franc/Desktop/NONPA/PROGETTO/ALZHEIMER_prognonpa/EDOARDO')
dataset<- read.csv2('oasis_cross-sectional.csv', sep=',')
View(dataset)
#data$LABEL[which(data$CDR>0)] <- 2
data_sample<- data[, 2:8]
data_train <- cbind(data$LABEL,data_sample)
train_n= nrow(data_train)*0.75
data_test <- data_train[162:216,]
data_train <- data_train[1:162,]
pValues <- ICPClassification(data_train,data_test)
library('caret')
library(conformalClassification)
library('randomForest')
pValues <- ICPClassification(data_train,data_test)
CPCalibrationPlot(pValues, data_test, "blue")
CPEfficiency(pValues,data_test$`data$LABEL`,0.05) #0.2727273
CPErrorRate(pValues,data_test$`data$LABEL`,0.05) #0.07272727
CPValidity(pValues,data_test$`data$LABEL`) #0.444126
CPObsFuzziness(pValues,data_test$`data$LABEL`)  #0.07995061
CPCalibrationPlot(pValues, data_test, "blue")
CPEfficiency(pValues,data_test$`data$LABEL`,0.05) #0.2727273
CPErrorRate(pValues,data_test$`data$LABEL`,0.05) #0.07272727
CPValidity(pValues,data_test$`data$LABEL`) #0.444126
CPObsFuzziness(pValues,data_test$`data$LABEL`)  #0.07995061
View(pValues)
train<- read.csv2('train.csv', sep=',')
test<- read.csv2('test.csv', sep=',')
View(test)
data_train <- train[,2:8]
train$LABEL <-ifelse(label=='Dem',2,1)
library('caret')
library(conformalClassification)
library('randomForest')
setwd('C:/Users/franc/Desktop/NONPA/PROGETTO/ALZHEIMER_prognonpa/EDOARDO')
train<- read.csv2('train.csv', sep=',')
test<- read.csv2('test.csv', sep=',')
# library('conformal')
# install.packages('conformal')
algorithm <- "rf"
trControl <- trainControl(method = "cv",  number=5,savePredictions=TRUE)
set.seed(3)
train$LABEL <-ifelse(label=='Dem',2,1)
test$LABEL <-ifelse(label=='Dem',2,1)
train$LABEL <-ifelse(train$label=='Dem',2,1)
test$LABEL <-ifelse(test$label=='Dem',2,1)
data_train <- train[,c(2:7,9)]
data_train <- train[,c(2:8,10)]
data_test <- test[,c(2:8,10)]
pValues <- ICPClassification(data_train,data_test)
data_train <- train[,c(2:7,10)]
data_test <- test[,c(2:7,10)]
pValues <- ICPClassification(data_train,data_test)
data_train <- train[,c(3:7,10)]
data_test <- test[,c(3:7,10)]
pValues <- ICPClassification(data_train,data_test)
plot(pValues)
View(pValues)
data_test <- cbind(test$LABEL,test[,3:7])
data_train <- cbind(train$LABEL,train[,3:7])
pValues <- ICPClassification(data_train,data_test)
barplot(table(pValues[,1],pValues[,2]))
View(pValues)
CPCalibrationPlot(pValues, data_test, "blue")
CPCalibrationPlot(pValues, data_test, "blue")
CPEfficiency(pValues,data_test$`data$LABEL`,0.05) #0.2727273
data <- rbind(train,test)
data$LABEL <- rbind(train$LABEL,test$LABEL)
View(data)
data <- rbind(train,test)
View(data)
CPCalibrationPlot(pValues, data_test, "blue")
CPEfficiency(pValues,data_test$`data$LABEL`,0.05) #0.2727273
CPEfficiency(pValues,data_test$LABEL,0.05) #0.2727273
pValues <- ICPClassification(data_train,data_test)
CPEfficiency(pValues,data_test$LABEL,0.05) #0.2727273
pValues <- as.matrix(pValues)
CPCalibrationPlot(pValues, data_test, "blue")
CPEfficiency(pValues,data_test$LABEL,0.05) #0.2727273
CPErrorRate(pValues,data_test$`data$LABEL`,0.05) #0.07272727
CPEfficiency(pValues,data_test$'test$LABEL',0.05) #0.2727273
CPEfficiency(pValues,data_test$`test$LABEL`,0.05) #0.2727273
CPErrorRate(pValues,data_test$`test$LABEL`,0.05) #0.07272727
CPValidity(pValues,data_test$`test$LABEL`) #0.444126
CPObsFuzziness(pValues,data_test$`test$LABEL`)  #0.07995061
setwd('C:/Users/franc/Desktop/NONPA/PROGETTO/ALZHEIMER_prognonpa/EDOARDO')
torte <-  read.csv2('oasis_longitudinal', sep=',')
torte <-  read.csv2('oasis_longitudinal.csv', sep=',')
pie(table(torte$M.F))
pie(table(torte$M.F))
pie(table(torte$M.F),col=c('blue','pink'))
pie(table(torte$M.F),col=c('pink','blue'))
pie(table(torte$Group),col=c('pink','blue'))
pie(table(torte$Group),col=c('red','green','blue'))
index <- seq(1,100)
pValues <- as.data.frame(pValues)
pValues$V3 <- 1-pValues$V1-pValues$V2
ppp <- t(pValues)
colnames(ppp)<- as.character(index)
rownames(ppp) <- c('Demented', 'NonDemented','Both')
x11()
barplot(ppp, col=c(1,2,3),legend=rownames(ppp))
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
barplot(ppp, col= cols,legend=rownames(ppp))
cols <- brewer.pal(3, "Blues")
barplot(ppp, col= cols,legend=rownames(ppp))
cols <- brewer.pal(3, "YlOrRd")
barplot(ppp, col= cols,legend=rownames(ppp))
barplot(ppp, col= cols,legend=rownames(ppp))
cols <- brewer.pal(3, "Blues")
barplot(ppp, col= cols,legend=rownames(ppp))
cols <- brewer.pal(3, "YlGn")
barplot(ppp, col= cols,legend=rownames(ppp))
cols <- brewer.pal(3, "Blues")
barplot(ppp, col= cols,legend=rownames(ppp))
cols <- brewer.pal(3, "Purplss")
cols <- brewer.pal(3, "Purples")
barplot(ppp, col= cols,legend=rownames(ppp))
cols <- brewer.pal(3, "PRGn")
barplot(ppp, col= cols,legend=rownames(ppp))
cols <- brewer.pal(3, "RdPu")
barplot(ppp, col= cols,legend=rownames(ppp))
barplot(ppp[,1:10], col= cols,legend=rownames(ppp))
barplot(ppp[,1:10], col= cols,legend=rownames(ppp))
CPEfficiency(pValues,data_test$`data$LABEL`,0.05) #0.2727273
CPEfficiency(pValues,data_test$`test$LABEL`,0.05) #0.2727273
CPErrorRate(pValues,data_test$`test$LABEL`,0.05) #0.07272727
CPErrorRate(pValues,data_test$`test$LABEL`,0.05) #0.16
er <-CPErrorRate(pValues,data_test$`test$LABEL`,0.05) #0.16
CPValidity(pValues,data_test$`test$LABEL`) #0.444126
CPObsFuzziness(pValues,data_test$`test$LABEL`)  #0.07995061
CPCalibrationPlot(pValues, data_test, "blue")
barplot(ppp[,1:10], col= cols,legend=rownames(ppp), xlabel=rownames(ppp[,1:10]))
barplot(ppp[,1:10], col= cols,legend=rownames(ppp), xlabel=rownames(ppp[,1:10]),ylabel='pvalues)
barplot(ppp[,1:10], col= cols,legend=rownames(ppp), xlabel=rownames(ppp[,1:10]),ylabel='pvalues')
barplot(ppp[,1:10], col= cols,legend=rownames(ppp), xlabel=rownames(ppp[,1:10]),ylabel='pvalues')
barplot(ppp[,1:10], col= cols,legend=rownames(ppp), xlab=rownames(ppp[,1:10]),ylab='pvalues')
options(rgl.debug= T)
library(rgl)
knitr::opts_chunk$set(echo = TRUE)
knitr::knit_hooks$set(webgl = hook_webgl)
ggplot2::theme_set(ggplot2::theme_bw())
library(survival)
library(survminer)
library(dplyr)
library(ggplot2)
library(knitr)
library(broom)
setwd("C:/Users/franc/Desktop/NONPA/PROGETTO")
library(stringr)
dataset_old <- read.csv("oasis_longitudinal.csv")
setwd("C:/Users/franc/Desktop/NONPA/PROGETTO")
library(stringr)
dataset_old <- read.csv("oasis_longitudinal.csv")
head(dataset_old)
colnames(dataset_old)
## DEMENTI
dataset_old$ID = str_sub(dataset_old$Subject.ID,-3)
dementi_prima <- dataset_old[dataset_old$Group=='Demented'& dataset_old$Visit==1,]
dementi_prima$status <- 2
dementi_prima$group_new <- 'Demented'
##NON DEMENTI
nondementi_last <- dataset_old[dataset_old$Group=='Nondemented',]
nondementi_last <-nondementi_last%>%group_by(ID)%>% mutate(max_visit=max(Visit))%>%ungroup()%>% filter(Visit==max_visit)
length(unique(nondementi_last$ID))
nondementi_last$status<-1
nondementi_last$group_new <- 'Nondemented'
## CONVERTED
converted_first <- dataset_old[dataset_old$Group=='Converted'&dataset_old$CDR >0,]
converted_first <-converted_first%>%group_by(ID)%>% mutate(min_visit=min(Visit))%>%ungroup()%>% filter(Visit==min_visit)
converted_first$group_new <- 'Demented'
converted_first$status <- 2
#ALL TOGETHER
dataset <- rbind(nondementi_last[,-17],dementi_prima,converted_first[,-17])
dataset$time_y <- dataset$MR.Delay / 365
dataset$status_fact <- factor(dataset$Group)
colnames(dataset) <- c( "Subject.ID",  "MRI.ID"   ,   "Group"   ,    "Visit"   ,    "time" , "M.F"       ,  "Hand" , "age"     ,    "EDUC"   ,     "SES"  ,       "MMSE"     ,   "CDR"     ,    "eTIV"    ,    "nWBV"   ,   "ASF"  ,       "ID"     ,     "status"   ,   "group_new"  , "time_y"    ,  "status_fact")
fit <- survfit(Surv(dataset$time, status==2) ~ 1, data = dataset)
# status==1 -> when the event occurred
summary(fit)
ggplot(data=dataset,aes(x=ID,y=time_y)) +
geom_bar(stat='identity',width=0.2) +
geom_point(aes(color=status_fact,shape=status_fact),size=6) +
coord_flip()
ggsurvplot(fit,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=360,
title="Kaplan-Meier Curve for Alzheimer Survival")
dataset$sex <- 0
dataset$sex[which(dataset$M.F=='F')] <-1
fit.sex <- survfit(Surv(time, status) ~ sex, data=dataset)
ggsurvplot(fit.sex, conf.int = T,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=360,
legend.title="SEX",  legend.labs=c('M','F'),
palette=c("darkblue","red"),
title="Kaplan-Meier Curves by gender class for Alzheimer Survival")
log_rank_test <- survdiff(Surv(time, status) ~ sex,data=dataset)
log_rank_test
hazard_ratio <- (log_rank_test$obs[1]/log_rank_test$exp[1])/(log_rank_test$obs[2]/log_rank_test$exp[2])
hazard_ratio #
hist(dataset[sex=='1',]$age, xlab='Age [years]', main='Histogram of age in Alzheimer Data', col="red")
dataset$sex <- 0
hist(dataset[sex=='0'& Group=='Converted',]$age, xlab='Age [years]', main='Histogram of age in Alzheimer Data', col="darkblue",bin=10)
attach(dataset)
hist(dataset[sex=='0'& Group=='Converted',]$age, xlab='Age [years]', main='Histogram of age in Alzheimer Data', col="darkblue",bin=10)
hist(dataset[sex=='1',]$age, xlab='Age [years]', main='Histogram of age in Alzheimer Data', col="red")
hist(dataset[sex=='1',]$age, xlab='Age [years]', main='Histogram of age in Alzheimer Data', col="red")
hist(dataset[sex=='1'&Group=='Converted',]$age, xlab='Age [years]', main='Histogram of age in Alzheimer Data', col="red")
hist(dataset[sex=='0'& Group=='Converted',]$age, xlab='Age [years]', main='Histogram of age of Converted in Alzheimer Data', col="darkblue",bin=10)
hist(dataset[sex=='1'& Group=='Converted',]$age, xlab='Age [years]', main='Histogram of age of Convertein Alzheimer Data', col="red",bin=10)
cox.age <- coxph(Surv(time_y, status) ~ age, data = dataset)
ggsurvplot(cox.age, conf.int = T,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
break.time.by=360,
legend.title="SEX",  legend.labs=c('M','F'),
palette=c("darkblue","red"),
title="Kaplan-Meier Curves by gender class for Alzheimer Survival")
plot(survfit(cox.age, data=dataset),
col="darkorange2", lwd=2, lty=1,
xlab='Time [days]', ylab='Survival Probability',
main='Baseline estimated survival probability')
plot(survfit(cox.age, data=dataset),
col="darkorange2", lwd=2, lty=1,
xlab='Time [days]', ylab='Survival Probability',
main='Baseline estimated survival probability')
#grid()
plot(survfit(cox.age, data=dataset),
col="darkorange2", lwd=2, lty=1,
xlab='Time [days]', ylab='Survival Probability',
main='Baseline estimated survival probability wrt Age')
plot(survfit(cox.age, data=dataset),
col=cols, lwd=2, lty=1,
xlab='Time ', ylab='Survival Probability',
main='Baseline estimated survival probability wrt Age')
cols=  brewer.pal(1, "RdPu")
plot(survfit(cox.age, data=dataset),
col=cols, lwd=2, lty=1,
xlab='Time ', ylab='Survival Probability',
main='Baseline estimated survival probability wrt Age')
cols=  brewer.pal(3, "RdPu")
plot(survfit(cox.age, data=dataset),
col=cols, lwd=2, lty=1,
xlab='Time ', ylab='Survival Probability',
main='Baseline estimated survival probability wrt Age')
cols=  brewer.pal(1, "RdPu")
cols=  brewer.pal(3, "RdPu")
plot(survfit(cox.age, data=dataset),
col=cols[3], lwd=2, lty=1,
xlab='Time ', ylab='Survival Probability',
main='Baseline estimated survival probability wrt Age')
glimpse(dataset)
dataset$sex <- as.factor(dataset$M.F)
mod.cox_age_sex <- coxph(Surv(time, status) ~ age + sex , data =  dataset)
summary(mod.cox_age_sex)
plot(survfit(mod.cox_age_sex, data=dataset),
col=cols[3], lwd=2, lty=1,
xlab='Time ', ylab='Survival Probability',
main='Baseline estimated survival probability')
grid()
plot(survfit(mod.cox_age_sex, data=dataset),
col=cols[3], lwd=2, lty=1,
xlab='Time ', ylab='Survival Probability',
main='Baseline estimated survival probability')
grid()
hist(dataset[sex=='0'& Group=='Converted',]$age, xlab='Age [years]', main='Histogram of age of Converted in Alzheimer Data', col="darkblue",bin=10)
hist(dataset[sex=='1'& Group=='Converted',]$age, xlab='Age [years]', main='Histogram of age of Convertein Alzheimer Data', col="red",bin=10)
hist(dataset[sex=='1'& Group=='Converted',]$age, xlab='Age [years]', main='Histogram of age of Convertein Alzheimer Data', col="red",bin=30)
